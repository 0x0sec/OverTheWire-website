<!--#set var="PageTitle" value="Wargames - Drifter - Level 0" -->
<!--#include virtual="/GLOBALHEADER.shtml" -->

<!--#include virtual="SIDEMENU.shtml" -->
<!--#include virtual="STARTCONTENT.shtml" -->
<div id="discuss">
  <a href="http://forum.overthewire.org/wargames/drifter">Discuss this level on the forum</a>
</div>
<h1>Level 0</h1>

<p>Drifter can be accessed on drifter.labs.overthewire.org. Level 0 listens on port 1111. </p>
<p>Level0 is an extremely trivial, encrypted, remote syscall proxy. Your aim is to read the contents of a file called "instructions" to get the username&nbsp;/&nbsp;password contents. </p>
<p>Upon connection, it sets up an encrypted rc4 key (based on the connecting IP address&nbsp;/&nbsp;port), read()'s in 9 integers, and then decrypts them, and handles them off to syscall(). This allows the network client to execute arbitrary syscalls in a safe way.</p>
<p>To give you an idea of what's needed:</p>
<p><b>You'll need to</b></p>
<ol>
  <li>If you are behind a NAT/PAT, you might want to do vortex level0, and complete this level from vortex, as otherwise your known IP address and port information changes.</li>
  <li>Examine how the RC4 keys are generated, and how they are applied</li>
  <li>
    <a href="http://www.linuxinfor.com/english/man2/mmap2.html">mmap2()</a>
    some memory. You will get the address where the memory was allocated in the response from the server.  mmap2() takes its arguments from registers, not the stack.
  </li>
  <li>
    <a href="http://www.linuxinfor.com/english/man2/read.html">read()</a>
    into that allocated buffer to get the file name. The source fd that you need will be 4. (0-2 = stdin/stdout/stderr, 3 will be network socket, so 4 in next in line. You will want to read in enough data for the filename "instructions"
  </li>
  <li>
    Write the filename ("instructions" sans quotes) to the allocated memory location to your client socket
  </li>
  <li>
    <a href="http://www.linuxinfor.com/english/man2/open.html">open()</a>
    the "instructions" file. You will get the fd it was allocated to in response
  </li>
  <li>
    <a href="http://www.linuxinfor.com/english/man2/read.html">read()</a>
    from the allocated file descriptor to your allocated memory
  </li>
  <li>
    <a href="http://www.linuxinfor.com/english/man2/write.html">write()</a>
    from the allocated buffer to the socket on the server (fd 4)
  </li>

</ol>
<p>Once all that is done, you will have the contents of the instructions file printed to your screen.</p>
<p>Of course - this does not prevent you from using other mechanisms to access the server, such as using "shelldemo" from metasploit 2.x to examine the environment. In fact, using shelldemo is probably a good exercise as well.</p>
<p>In order to get the values for the parameters you need, you can use cross-references of linux code on the net, for example, to look up the value for __NR_read (linux read syscall()), we can use <a href="http://www.google.com.au/search?q=linux+lxr+__NR_read&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a">this</a> which will lead us to <a href="http://lxr.linux.no">http://lxr.linux.no</a>. From there we can use the search facility to find the values we need, <a href="http://lxr.linux.no/linux/include/asm-i386/unistd.h#L11">such as:</a></p>
<p>#define __NR_read                 3</p>
<p>If this level is too complicated / involved, please leave a comment. While it's complicated than adding several little endian integers together, I don't want the initial level to be overkill. </p>

<p>-</p>
<dt>Code listing (<a href="level0.c">level0.c</a>)</dt>
<pre>
<!--#include virtual="level0.c.colored.html" -->
</pre>

<p>Here is the rc4 code that I used:</p>
<dt>Code listing (<a href="rc4.c">rc4.c</a>)</dt>
<pre>
<!--#include virtual="rc4.c.colored.html" -->
</pre>


<!--#include virtual="ENDCONTENT.shtml" -->
<!--#include virtual="/FOOTER.shtml" -->

